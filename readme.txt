# üìö Proyecto ‚Äì Examen1Back2

---
## 1. Descripci√≥n General:

**Examen1Back2** es una aplicaci√≥n desarrollada en **Spring Boot** para la gesti√≥n acad√©mica de **usuarios, docentes y cursos**.
Integra **JPA/Hibernate** para persistencia y **MySQL** como base de datos, asegurando integridad y consistencia de los datos.

El proyecto permite:

- Crear, consultar, actualizar y eliminar registros de manera eficiente.
- Mantener relaciones coherentes entre entidades (docentes asociados a cursos, usuarios vinculados a roles).
- Facilitar integraciones futuras con **REST APIs** o aplicaciones front-end.

### Arquitectura:

- **Modelo/Entidad:** Define estructura de datos y relaciones.
- **Repositorio (Repository):** Operaciones CRUD sobre las entidades.
- **Servicio (Service Layer):** L√≥gica de negocio.
- **Controlador (Controller):** Gesti√≥n de solicitudes REST.
- **Configuraci√≥n BD:** Conexi√≥n con MySQL y generaci√≥n autom√°tica de tablas.

---

## 2. Cambios realizados y correcciones de errores:

| Archivo | Error detectado | Soluci√≥n aplicada |
|---------|----------------|----------------|
| `Curso.java` | `@Id` mal escrito | Correcci√≥n a `@Id` y uso de `@GeneratedValue(strategy = GenerationType.IDENTITY)` |
| `Curso.java` | `@Table` faltante | Agregado `@Table(name = "curso")` para mapear tabla correctamente |
| `Curso.java` | `@Column` no definido para nombre | Agregado `@Column(name = "nombre", nullable=false, unique=false, length=50)` |
| `Curso.java` | `@JoinColumn` con punto y coma | Eliminado error de sintaxis y corregidos espacios |
| `Curso.java` | Visibilidad de atributos | Agregado `private` y `;` en `Docente docente` |
| `Curso.java` | Constructores incompletos | A√±adidos campos al constructor y generados m√©todos `get` y `set` |
| `Docente.java` | `@Entity` mal escrito | Corregido a `@Entity` |
| `Docente.java` | Tabla no definida | Agregado `@Table(name = "docente")` |
| `Docente.java` | Columnas y relaciones | A√±adido `@Column(name="especialidad", nullable=false, length=30)` y m√©todos `get` y `set` |
| `Usuario.java` | `@Column` incorrecto | Eliminada anotaci√≥n `@Column(name="id_usuario")` y ajustados otros campos |
| `Usuario.java` | ID no autogenerado | Agregado `@GeneratedValue(strategy = GenerationType.IDENTITY)` |
| `Usuario.java` | Constructores incompletos | Corregidos y a√±adidos m√©todos `get` y `set` |
| `Usuario.java` | Relaci√≥n faltante | A√±adido `@OneToOne` con otras entidades |
| `TipoUsuario.java` | No exist√≠a | Creado paquete, enum `TipoUsuario` y configuraci√≥n de conexi√≥n BD |

> Se restaur√≥ parte de la informaci√≥n con `git revert` para mantener integridad hist√≥rica de cambios.

---

## 3. Gu√≠a para conexi√≥n a la Base de Datos:

<details>
<summary>Ver pasos de configuraci√≥n</summary>

1. **Crear base de datos en MySQL**
```sql
Dar el nombre y copiarlo en la url en el archivo application.properties;

---

## 4. Configurar application.properties:
```properties
spring.datasource.url=jdbc:mysql://localhost:3306/examen1back2
spring.datasource.username=usuario
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

---
## 5. Ejecutar la aplicaci√≥n Spring Boot:

      Esto generar√° autom√°ticamente las tablas seg√∫n las entidades definidas.

## 6. Verificar en MySQL

      Confirmar que las tablas docente, curso, usuario y tipo_usuario existen y sus relaciones son correctas.

      </details>

---

##7. Buenas pr√°cticas y recomendaciones

‚úÖ Ortograf√≠a de anotaciones: Errores en @Entity, @Id, @Column generan fallos.

‚úÖ Consistencia de nombres: Tablas, columnas y atributos deben coincidir.

‚úÖ Getters y Setters: Acceso controlado a atributos garantiza encapsulamiento.

‚úÖ Revisi√≥n de relaciones: Validar @OneToOne, @OneToMany y @ManyToOne.

‚úÖ Control de versiones: Git permite revertir cambios problem√°ticos sin perder informaci√≥n.

‚úÖ Documentaci√≥n continua: Mantener un CHANGELOG.md para registrar cada modificaci√≥n.

‚úÖ Pruebas unitarias: Validar constructores, getters/setters y relaciones antes de integrar.

‚úÖ Integridad de datos: Cada cambio en la BD debe reflejarse en pruebas para evitar inconsistencias.